service:
  name: "blog"

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules:
      forceExclude:
        - aws-sdk
  serverless-offline:
    port: 3886
  domains:
    prod: api.banyudu.com
    staging: staging-api.banyudu.com
    dev: dev-api.banyudu.com
  customDomain:
    domainName: ${self:custom.domains.${self:provider.environment.stage}} # Change this to your domain.
    basePath: 'blog' # This will be prefixed to all routes
    stage: ${self:provider.environment.stage}
    createRoute53Record: true
  sentry:
    dsn: ${self:provider.environment.sentryDSN}
  table: '${self:service.name}-${self:provider.environment.stage}'


# Add the serverless-webpack plugin
plugins:
  - serverless-sentry
  - serverless-webpack
  - serverless-domain-manager
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  memorySize: 256
  environment:
    stage: ${opt:stage, self:provider.stage}
    sentryDSN: ${ssm:/${self:service.name}/sentryDSN}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    TABLE: ${self:custom.table}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource:
        - { "Fn::GetAtt": ["Table", "Arn" ] }
        - { "Fn::Join": [ "/", [
          { "Fn::GetAtt": ["Table", "Arn" ] }, "index", "urlGSI"
        ]]}

functions:
  getCategories:
    handler: handler.getCategories
    events:
      - http:
          method: get
          path: categories
          cors: true
  getTags:
    handler: handler.getTags
    events:
      - http:
          method: get
          path: tags
          cors: true
  getPosts:
    handler: handler.getPosts
    events:
      - http:
          method: get
          path: posts
          cors: true
  getPost:
    handler: handler.getPost
    events:
      - http:
          method: get
          path: post/{id}
          cors: true
          request:
            parameters:
              paths:
                id: true
  getGists:
    handler: handler.getGists
    events:
      - http:
          method: get
          path: gists
          cors: true
  syncGists:
    handler: handler.syncGists
    events:
      - http:
          method: post
          path: sync
          cors: true
      - schedule: rate(1 hour)

resources:
  Resources:
    Table:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: url
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.table}
        GlobalSecondaryIndexes:
          - IndexName: urlGSI
            KeySchema:
              - AttributeName: url
                KeyType: HASH
            Projection:
              ProjectionType: ALL
